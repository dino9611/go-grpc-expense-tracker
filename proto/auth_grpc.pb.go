// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/auth.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthsClient is the client API for Auths service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthsClient interface {
	Register(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*User, error)
	Login(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*User, error)
}

type authsClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthsClient(cc grpc.ClientConnInterface) AuthsClient {
	return &authsClient{cc}
}

func (c *authsClient) Register(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/Auths/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authsClient) Login(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/Auths/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthsServer is the server API for Auths service.
// All implementations must embed UnimplementedAuthsServer
// for forward compatibility
type AuthsServer interface {
	Register(context.Context, *UserRegisterReq) (*User, error)
	Login(context.Context, *UserLoginReq) (*User, error)
	mustEmbedUnimplementedAuthsServer()
}

// UnimplementedAuthsServer must be embedded to have forward compatible implementations.
type UnimplementedAuthsServer struct {
}

func (UnimplementedAuthsServer) Register(context.Context, *UserRegisterReq) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthsServer) Login(context.Context, *UserLoginReq) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthsServer) mustEmbedUnimplementedAuthsServer() {}

// UnsafeAuthsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthsServer will
// result in compilation errors.
type UnsafeAuthsServer interface {
	mustEmbedUnimplementedAuthsServer()
}

func RegisterAuthsServer(s grpc.ServiceRegistrar, srv AuthsServer) {
	s.RegisterService(&Auths_ServiceDesc, srv)
}

func _Auths_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthsServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auths/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthsServer).Register(ctx, req.(*UserRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auths_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthsServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auths/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthsServer).Login(ctx, req.(*UserLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Auths_ServiceDesc is the grpc.ServiceDesc for Auths service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auths_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Auths",
	HandlerType: (*AuthsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Auths_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Auths_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth.proto",
}
